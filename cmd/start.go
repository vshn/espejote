package cmd

import (
	"crypto/tls"
	"os"

	"github.com/bombsimon/logrusr/v4"
	"github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"k8s.io/apimachinery/pkg/runtime"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	clientgoscheme "k8s.io/client-go/kubernetes/scheme"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/healthz"
	"sigs.k8s.io/controller-runtime/pkg/metrics/filters"
	metricsserver "sigs.k8s.io/controller-runtime/pkg/metrics/server"
	"sigs.k8s.io/controller-runtime/pkg/webhook"

	espejov1alpha1 "github.com/vshn/espejote/api/v1alpha1"
	"github.com/vshn/espejote/internal/controller"
)

var (
	scheme = runtime.NewScheme()
	log    = logrus.New()
)

func init() {
	utilruntime.Must(clientgoscheme.AddToScheme(scheme))
	utilruntime.Must(espejov1alpha1.AddToScheme(scheme))
	// +kubebuilder:scaffold:scheme

	log.SetFormatter(&logrus.TextFormatter{
		FullTimestamp: true,
	})
	// log.SetFormatter(&logrus.JSONFormatter{})
}

func Start(cmd *cobra.Command, args []string) {
	var tlsOpts []func(*tls.Config)

	l := logrusr.New(log)
	ctrl.SetLogger(l)

	// if the enable-http2 flag is false (the default), http/2 should be disabled
	// due to its vulnerabilities. More specifically, disabling http/2 will
	// prevent from being vulnerable to the HTTP/2 Stream Cancellation and
	// Rapid Reset CVEs. For more information see:
	// - https://github.com/advisories/GHSA-qppj-fm5r-hxr3
	// - https://github.com/advisories/GHSA-4374-p667-p6c8
	disableHTTP2 := func(c *tls.Config) {
		l.Info("disabling http/2")
		c.NextProtos = []string{"http/1.1"}
	}

	if !viper.GetBool("enable-http2") {
		tlsOpts = append(tlsOpts, disableHTTP2)
	}

	webhookServer := webhook.NewServer(webhook.Options{
		TLSOpts: tlsOpts,
	})

	// Metrics endpoint is enabled in 'config/default/kustomization.yaml'. The Metrics options configure the server.
	// More info:
	// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.4/pkg/metrics/server
	// - https://book.kubebuilder.io/reference/metrics.html
	metricsServerOptions := metricsserver.Options{
		BindAddress:   viper.GetString("metrics-address"),
		SecureServing: viper.GetBool("metrics-secure"),
		// TODO(user): TLSOpts is used to allow configuring the TLS config used for the server. If certificates are
		// not provided, self-signed certificates will be generated by default. This option is not recommended for
		// production environments as self-signed certificates do not offer the same level of trust and security
		// as certificates issued by a trusted Certificate Authority (CA). The primary risk is potentially allowing
		// unauthorized access to sensitive metrics data. Consider replacing with CertDir, CertName, and KeyName
		// to provide certificates, ensuring the server communicates using trusted and secure certificates.
		TLSOpts: tlsOpts,
	}

	if viper.GetBool("metrics-secure") {
		// FilterProvider is used to protect the metrics endpoint with authn/authz.
		// These configurations ensure that only authorized users and service accounts
		// can access the metrics endpoint. The RBAC are configured in 'config/rbac/kustomization.yaml'. More info:
		// https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.4/pkg/metrics/filters#WithAuthenticationAndAuthorization
		metricsServerOptions.FilterProvider = filters.WithAuthenticationAndAuthorization
	}

	mgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{
		Scheme:                 scheme,
		Metrics:                metricsServerOptions,
		WebhookServer:          webhookServer,
		HealthProbeBindAddress: viper.GetString("metrics-address"),
		LeaderElection:         viper.GetBool("enable-election"),
		LeaderElectionID:       "b0008392.appuio.io",
		// LeaderElectionReleaseOnCancel defines if the leader should step down voluntarily
		// when the Manager ends. This requires the binary to immediately end when the
		// Manager is stopped, otherwise, this setting is unsafe. Setting this significantly
		// speeds up voluntary leader transitions as the new leader don't have to wait
		// LeaseDuration time first.
		//
		// In the default scaffold provided, the program ends immediately after
		// the manager stops, so would be fine to enable this option. However,
		// if you are doing or is intended to do any operation such as perform cleanups
		// after the manager stops then its usage might be unsafe.
		// LeaderElectionReleaseOnCancel: true,
	})
	if err != nil {
		l.Error(err, "unable to start manager")
		os.Exit(1)
	}

	// metrics.Registry.MustRegister(&controllers.UpgradeInformationCollector{
	// 	Client: mgr.GetClient(),
	// 	ManagedUpstreamClusterVersionName: managedUpstreamClusterVersionName,
	// })
	if err = (&controller.ManagedResourceReconciler{
		Client: mgr.GetClient(),
		Scheme: mgr.GetScheme(),
		Config: mgr.GetConfig(),
		// ManagedNamespace:  viper.GetString("managed-namespace"),
		// WatchedNamespaces: viper.GetStringSlice("watch-namespace"),
		// WatchedRegex:      viper.GetString("watch-regex"),
		// DryRun:            viper.GetBool("dry-run"),
		// ExternalParser:    viper.GetString("external-parser"),
		// ExternalParams:    viper.GetString("external-params"),
	}).SetupWithManager(mgr); err != nil {
		l.Error(err, "unable to create controller", "controller", "PrometheusRule")
		os.Exit(1)
	}

	// metrics.Registry.MustRegister(&controllers.UpgradeInformationCollector{
	// 	Client: mgr.GetClient(),
	// 	ManagedUpstreamClusterVersionName: managedUpstreamClusterVersionName,
	// })
	if err = (&controller.ClusterManagedResourceReconciler{
		Client: mgr.GetClient(),
		Scheme: mgr.GetScheme(),
		Config: mgr.GetConfig(),
		// ManagedNamespace:  viper.GetString("managed-namespace"),
		// WatchedNamespaces: viper.GetStringSlice("watch-namespace"),
		// WatchedRegex:      viper.GetString("watch-regex"),
		// DryRun:            viper.GetBool("dry-run"),
		// ExternalParser:    viper.GetString("external-parser"),
		// ExternalParams:    viper.GetString("external-params"),
	}).SetupWithManager(mgr); err != nil {
		l.Error(err, "unable to create controller", "controller", "PrometheusRule")
		os.Exit(1)
	}

	// +kubebuilder:scaffold:builder

	if err := mgr.AddHealthzCheck("healthz", healthz.Ping); err != nil {
		l.Error(err, "unable to set up health check")
		os.Exit(1)
	}
	if err := mgr.AddReadyzCheck("readyz", healthz.Ping); err != nil {
		l.Error(err, "unable to set up ready check")
		os.Exit(1)
	}

	l.Info("starting manager")
	if err := mgr.Start(ctrl.SetupSignalHandler()); err != nil {
		l.Error(err, "problem running manager")
		os.Exit(1)
	}
}
